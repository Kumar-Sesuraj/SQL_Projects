create database CaseStudy
use CaseStudy
select * from Fact
select * from Location
select * from Product

-- 1. Display the number of states present in the LocationTable.
select count(distinct(State)) as NumberOfStates 
from Location

-- 2. How many products are of regular type?
select count(Product) as No_Regular_Type 
from Product where Type='Regular'

-- 3. How much spending has been done on marketing of product ID 1?
select sum(Marketing) as Product1_Marketing_Value 
from Fact where ProductId=1

-- 4. What is the minimum sales of a product?
select MIN(Sales) as Min_Sales from Fact

-- 5. Display the max Cost of Good Sold (COGS).
select max(cogs) as Max_cogs from Fact

-- 6. Display the details of the product ID where product type is coffee.
select ProductId from Product where Product_Type='Coffee'

-- 7. Display the details where total expenses are greater than 40.
select * from Fact where Total_Expenses>40

-- 8. What is the average sales in area code 719?
select AVG(Sales) as AVG_Sales_719 from Fact where Area_Code=719

-- 9. Find out the total profit generated by Colorado state.select SUM(Profit) as TotoalProfit from Fact where Area_Code in (select Area_Code from Location where State='Colorado')-- 10. Display the average inventory for each product ID.select ProductId, AVG(Inventory) as Avg_Inventory from Factgroup by ProductIdorder by ProductId-- 11. Display state in a sequential order in a LocationTable.select * from Locationorder by State-- 12. Display the average budget margin where the average budget margin should be greater than 100.select ProductId, AVG(Budget_Margin) as AVG_Budget_Margin from Fact group by ProductIdhaving AVG(Budget_Margin)>100-- 13. What is the total sales done on date 2010-01-01?
select SUM(Sales) as Total_Sales from Fact where Date='2010-01-01'

-- 14. Display the average total expense of each product ID on an individual date.
select ProductId, Date, AVG(Total_Expenses) as AVG_Total_Exp from Fact
group by ProductId, Date
order by ProductId, Date

-- 15. Display the table with the following attributes such as date, product ID, product_type, product, sales, profit, state, area_code.
select f.date, f.ProductId,p.Product_Type, p.Product,f.Sales,f.Profit,l.State,l.Area_Code from Fact f
inner join Location l
on l.Area_Code=f.Area_Code
inner join Product p
on p.ProductId=f.ProductId
order by ProductId


-- 16. Display the rank without any gap to show the sales wise rank.
select *, DENSE_RANK() OVER (ORDER BY Sales) AS RANKING from Fact

-- 17. Find the state wise profit and sales.
select l.State,sum (f.Profit) as Prodfit, sum(f.Sales) as Sales from Fact f
inner join Location l
on l.Area_Code=f.Area_Code
group by l.State


-- 18. Find the state wise profit and sales along with the product name.
select l.State, p.Product ,sum (f.Profit) as Prodfit, sum(f.Sales) as Sales from Fact f
inner join Location l
on l.Area_Code=f.Area_Code
inner join Product p
on p.ProductId=f.ProductId
group by l.State, p.Product
order by l.State, p.Product

-- 19. If there is an increase in sales of 5%, calculate the increased sales.

select Sales, (Sales*0.05) as Five_percent_Sales, (Sales+(Sales*0.05)) as Five_Percent_Inc_Sales from Fact

-- 20. Find the maximum profit along with the product ID and product type.select f.ProductId, p.Product_Type, Max(f.Profit) as Prodfit from Fact f
inner join Product p
on p.ProductId=f.ProductId
group by  f.ProductId,p.Product_Type


-- 21. Create a stored procedure to fetch the result according to the product type from ProductTable.

create procedure SP_Prod_Type (@Prod_Type varchar(20))
as
begin
	select * from Product where Product_Type=@Prod_Type
end

exec SP_Prod_Type Tea

-- 22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.
select ProductId, Total_Expenses,
			(case 
			when Total_Expenses<60 then 'Profit'
			else 'Loss' end) as Decision
from Fact 
order by ProductId
 

-- 23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.
select * from Fact

select Date, ProductId, SUM(Sales) as weekly_Sales 
from Fact
group by rollup	(Date, ProductId)

select Date, ProductId, SUM(Sales) as weekly_Sales 
from Fact
group by cube	(Date, ProductId)

select Date, ProductId, SUM(Sales) as weekly_Sales 
from Fact
group by grouping sets	(Date, ProductId)

-- 24. Apply union and intersection operator on the tables which consist of attribute area code.
select Area_Code from Fact
union
select Area_Code from Location
order by Area_Code

select Area_Code from Fact
intersect
select Area_Code from Location
order by Area_Code

-- 25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.
create or alter function fn_product_type(@ProdType varchar(30))
returns table
as
	return (select * from Product where Product_Type=@ProdType)

select * from dbo.fn_product_type('Coffee')


-- 26. Change the product type from coffee to tea where product ID is 1 and undo it.
begin transaction
update Product set Product_Type='Tea' where ProductId=1
rollback transaction

select * from Product


-- 27. Display the date, product ID and sales where total expenses are between 100 to 200.
select Date,ProductId, Sales from Fact where Total_Expenses between 100 and 200
order by Date

-- 28. Delete the records in the ProductTable for regular type.
select * from Product
delete Product where Type='Regular'

-- 29. Display the ASCII value of the fifth character from the column Product.
select * from Product

SELECT ASCII(SUBSTRING(Product, 5, 1)) AS ascii_value
FROM Product;

